注意二分查找的各种变种的条件如何设置。不管条件如何变化，整体的代码框架是不变的。
注意查找前的空数组判断，对于 return num_list_sorted[right] < value ? right : -1; 的情况，空数组调用下标操作会 core。对于 return left; 的情况，空数组会直接返回 left == 0，导致出错。
注意使用 middle = (left + right) / 2会有整数溢出的问题（问题会出现在当 left + right 的结果大于表达式结果类型所能表示的最大值时，这样，产生溢出后再 /2 是不会产生正确结果的，而 middle = left + (right - left) / 2 不存在这个问题。

终于因为二分查找学会了数组边界的判断。
对于一个数组需要确定它的左边界（left）和右边界（right），从而知道这个数组的范围，这样才能继续后面的操作，比如说遍历。
一般来说可以使用[left, right)和[left, right] 2 种边界，这 2 种边界设定都能正确描述一个数组的范围，本质上是一致的。经验上来看，前者好一些。比如说一般我们在遍历数组时，会写：for (int i = 0; i < size; i++)，即[0, size)。后者应该是for (int i = 0; i <= size - 1; i++)，即[0, size - 1]。
前者的数组长度是 right - left，后者是 right - left + 1。

二分查找就是将原始数组不断的一分为二，期间边界设定需要保持一致，不然容易出错。（其实肯定是需要一致的，不然即使对了也是碰巧）
二分查找的循环终止条件应该是数组中只有唯一 1 个元素，判断完这个元素，那数组中所有的值就都被查找完了。
如果使用[left, right)的边界设定方式，那就是 left 指向数组中唯一的元素，right 指向它的下一个位置，即 left = right - 1。所以 while 循环的条件应该是：while (left < right)。而且 right 更新应该是 right = middle，而 left = middle + 1。因为 middle = left + (right - left) / 2 得到的下标一定是在[left, right)中的，其对应的元素已经被判断过了。如果用来更新 left，那它的下一个元素才应该出现在子数组中；如果用来更新 right，那它才可能是子数组的开区间，如果 right = middle - 1，那这个新的 right 就是一个未被判断过的元素，不能作为开区间。
如果使用[left, right]的边界设定方式，那就是 left = right 都指向数组中的唯一元素。所以 while 循环的条件应该是：while (left <= right)。而且 right 更新应该是 right = middle - 1，left = middle + 1。因为 middle 已经被判断过了，这种边界设定下，更新后的 left 和 right 都应该是未被判断过的元素下标。

目前的代码都是使用[left, right]的边界设定，while (left <= right)。注意到循环结束之后 left 和 right 的关系一定是 left > right，也就是 left = right + 1。这个对于后续的判断是非常重要的。为了统一思路，返回值都以 right 为准。
如果使用[left, right)的边界设定，while (left < right)。也就是 left = right。

发现二分查找的各种变体和不同的写法会导致很多边界条件需要考虑。但是使用 vector 的 [] 下标操作居然被设置为不会进行越界检查，如果想检查需要使用 at 函数。这样就不能好好调试代码了。考虑了一下还是都改成 C 数组吧。
后来想到，其实用 C 数组也一样，因为越界访问了也不会报错抛异常，还是需要自己注意。

越研究越发现，其实二分查找本身的算法不太难，各种变体问题的主要解决方法仔细想想思路也应该有。难的是各种边界条件的考虑，很繁琐，需要耐心。
（1）首先需要想好的就是循环结束的条件。其实想通了也挺简单的，就是子数组中只有一个元素的时候。对于不同的边界表示形式，循环结束条件会不同，做相应的修改就行。
（2）下标每次更新的时候都需要注意新的下标是否合法（是否可以通过这个新下标访问数组，是否可以返回这个新下标）。但是这里一定要注意：新下标可能是在循环内部更新的，也可能在循环中没有更新过，而依然保持了初始值。所以跳出循环以后，需要返回的下标的情况需要针对这 2 种情况都考虑到。
比如对于【如果数组中有重复元素，返回第一次出现的下标】（solution3），很明显 middle 一定是合法的下标，所以 middle 的边界是 0 和 size - 1。right = middle - 1，所以边界是 -1 和 size - 2。循环结束以后需要考虑的下标是 right + 1，它的边界和 middle 相同，是 0 和 size - 1，看起来是合法的，但真正对么？不对。如果 right 从未被修改，那循环结束以后 right 依然是 size - 1，所以 right + 1 的边界有可能是 size 了，这时候就越界了。所以最后一定还是需要做边界的判断，保证能返回正确的下标。
（3）对于返回前的判断条件，除了边界合法性的判断，还有就是逻辑正确性的判断。比如对于【如果数组中有重复元素，返回第一次出现的下标】（solution3），返回前的判断条件应该是 if (right + 1 < len && num_list_sorted[right + 1] == value)，前半部分是边界合法性的判断，后半部分是逻辑正确行的判断。
什么时候需要在返回前的判断条件里面加入逻辑的判断条件呢？比如对于【如果数组中有重复元素，返回第一次出现的下标】（solution3），需要返回的是 right + 1，而 right + 1 如果是合法的下标，那一定是通过 middle 更新而来的。而 middle 对应元素的值在循环中已经判断过 >= value，而对于这个问题我们需要的是严格等于的那个下标，所以逻辑判断条件是需要的。
再比如对于【如果数组中有重复元素，返回最后一次出现的下标】（solution4），需要返回的是 right。先考虑 right 是从 middle 更新而来的，我只知道 right 的下一个元素（middle）是大于 value 的，但是 right 可以是等于或小于 value 的，所以也需要加逻辑判断条件。当然了，只要 right 可能从 middle 更新而来，这个判断就必须要加。
对于【查找第一个大于 value 的元素的下标】（solution5），与 solution3 类似，想要返回的都是 right + 1（middle），而循环内部的判断条件已经说明了，只有当 middle 对应元素的值严格大于 value 才会更新 right，所以我们已经知道 right + 1 一定是大于 value 的下标。
对于【查找最后一个小于 value 的元素的下标】（solution7），需要返回的是 right，初始的 right 是合法下标，所以只需要关注 middle 更新的 right 是否合法。middle 的边界是 0 和 size - 1，right = middle - 1，所以边界是 -1 和 size - 2。先考虑 size - 2，当 size 为 0 的时候已经被前面判断过了，size 为 1 的时候 size - 2 = -1，和边界 -1 重合了，size 大于等于 2 的时候 size - 2 都是合法下标了。所以其实需要考虑的只有 -1 这种情况。但是 right = -1 的时候也不需要判断了，说明没有找到，可以直接作为返回值。

学到一个挺有意思的写法，就是当子数组的长度比较小（5 个以下）之后，直接顺序查找。这样时间复杂度不变，但是省了好多边界处理的麻烦。不过这样偷懒的方法好与不好需自行判断。
