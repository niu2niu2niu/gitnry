这个题思路也不难，网站给出的 solution 中最 brute 的方法我都没想到，效率太低，我想到了每次查询新添加的元素是否存在，写了 solution1。
主要就是找开始和结束的位置。开始位置 i 从 0 开始遍历，结束位置 j 从 i+1 开始遍历，找到重复的字符就 break 出去。

solution2 主要是让开始位置跳跃前进，不要每次都只增加 1，而是从 map 里指明的重复字符的位置开始往后。但是这里要注意，重复字符的位置一定不能比 i 小，因为比 i 小的位置作为子串的开始是已经处理过的了。

但上面 2 种方法还是用了 2 层循环。而且需要存储 string s 中的所有字符。

终于想明白 solution page 中的 slide window 是什么意思了。之前一直困惑为啥答案中可以用一轮循环完成任务，就是因为 slide window 的思想。其实如果子串的末尾已经到了整个字符串的结束了，那就没有必要再遍历子串的起始位置了，因为继续遍历下去的话子串越来越小。
所以 solution2 中效率的浪费在于每次从 i+1 位置开始查找，其实没有必要，因为如果 i 跳跃到了重复字符的位置，那说明 i 到 j 之间的字符是没有重复的。

抄了 discuss 里面的一个 solution4。代码很精简了，但是也存在占内存的问题。而且要注意，这里 (i, j] 的使用。

仿照 solution4 写了一个 solution3，只用 [i, j)，但是代码就不够简洁了，需要处理边界条件。而且由于使用了 stl 的 map，导致需要先判断是否存在，再判断值的大小。
另外 solution3 还有一个细节需要注意，因为是 [i, j)，也就是说此时的 i 位置的结果是 window 中的有效结果，所以 result 的更新必须放在前面，否则当命中了 if 语句之后，i 的值被更新了，然后才去更新 result 会出问题的。

还有一些其它要注意的：
（1）边界条件。如果是 [i, j)，那 j 会是数组末尾的下一个字符，result 在 for 循环中更新的话一定要注意循环结束之后还要再处理一下。所以这个代码就会有重复行了，solution4 中的 (i, j] 要更优雅一些。
（2）j = i + 1，如果 i=0，那 j 最小会是 1。这种写法也是危险的，因为默认了数组中有值。所幸在自己写的 solution1 和 solution2 中都用了 2 层循环，最外层循环避免了这种问题的发生。

另外还学习了模板函数的写法。之前写的输出代码太冗余了，用模板的方法简洁多了。
